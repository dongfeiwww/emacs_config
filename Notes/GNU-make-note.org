* make中的标准变量
  - MAKECMDGOALS
    - The MAKECMDGOALS variable contains a list of all the targets specified on the command line for the current execution of make
* 自动生成依赖性
  设定目标文件对对应源文件和头文件的依赖
  %.o:%.c %.h
	$(CC) $(CFLAGS) -c $<
  %.d: %.c  
	@set -e; rm -f $@; \  
	$(CC) -M $(CPPFLAGS) $< > $@.$$$$; \  
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \  
	rm -f $@.$$$$
  这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“@set -e”为bash命令，意为“如果命令带非零值返回,立即退出”“rm -f $@”的意思是删除所有   的目标，也就是[.d]文件，第二行的意思是，为每个依赖文件“$<”，也就是[.c]文件生成   依赖文件，“$@”表示模式“%.d”文件，如果有一个 C 文件是 name.c，那么“%”就是   “name”，“$$$$”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第   三行使用 sed 命令做了一个替换，关于 sed 命令的用法请参看相关的使用文档。第四行就是   删除临时文件
* 使用变量
  objects = main.o kbd.o command.o display.o \
     insert.o search.o files.o utils.o
  在需要使用到这些.o文件的地方，用$(objects)来表示
  - 使用变量式要在变量名前加上"$"符号，但最好使用小括号"()"或是大括号"{}"把变量给包括起来
  - 使用变量中的变量
    - 第一种方法
      foo = $(bar)
      bar = $(ugh)
      ugh = Huh?
      all:
      echo $(foo)
      会打印出变量$(foo)的值是"Huh?"
    - 第二种方法
      x := foo
      y := $(x) bar
      x := later
      其等价于
      y := foo bar
      x := later
      值得一提的是，这种方法，前面的变量不能使用后面的变量，只能使用前面定义好的变量。例如：
      y := $(x) bar
      x := foo
      那么， y的值是"bar"，而不是"foo bar"。
  - 变量的高级用法
    - 变量替换
      $(var:a=b) 或者 ${var:a=b}
      其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空格”或是“结束符”
      另一种变量替换的技术是以“静态模式”定义的，如：
      foo := a.o b.o c.o
      bar := $(foo:%.o=%.c)
      这依赖于被替换字串中的有相同的模式，模式中必须包含一个“%”字符，这个例子同样让$(bar)变量的值为“a.c b.c c.c”。
    - 把变量的值再当成变量
      x = y
      y = z
      a := $($(x))
      在这个例子中，$(x)的值是“y”，所以$($(x))就是$(y)，于是$(a)的值就是“z”。 （注意，是“x=y”，而不是“x=$(y)”）
  - 追加变量值
    我们可以使用"+="操作符给变量追加值，如：
    objects = main.o foo.o bar.o utils.o  
    objects += another.o    
    于是，我们的$(objects)值变成：“main.o foo.o bar.o utils.o another.o”（another.o被追加进去了）
* 指定伪目标
  示例
  .PHONY:clean
  clean: 
  	-del ${OBJECTS}
  当然，为了避免和文件重名的这种情况，我们可以使用一个特殊的标记“.PHONY”来显示地指明一个目标是“伪目标”，向 make 说明，不管是否有这个文件，这个目标就是“伪目标”
  前面说过，.PHONY 意思表示 clean 是一个“伪目标”， 。而在 rm 命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean 的规则不要放在文件的开头，不然，这就会变成 make 的默认目标，相信谁也不愿意这样。不成文的规矩是――“clean从来都是放在文件的最后”。 
* 静态模式
  语法
  <targets ...>: <target-pattern>: <prereq-patterns ...>  
  <commands>  
  我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符
  第一个示例
  objects = foo.o bar.o  
  
  all: $(objects)  
  
  $(objects): %.o: %.c  
  $(CC) -c $(CFLAGS) $< -o $@
  第二个示例
  files = foo.elc bar.o lose.o  
  
  $(filter %.o,$(files)): %.o: %.c  
  $(CC) -c $(CFLAGS) $< -o $@  
  $(filter %.elc,$(files)): %.elc: %.el  
  emacs -f batch-byte-compile $<  


  $(filter %.o,$(files))表示调用 Makefile 的 filter 函数，过滤“$filter”集，只要其
  中模式为“%.o”的内容。其的它内容，我就不用多说了吧。这个例字展示了 Makefile 中更
  大的弹性。
* 模式规则
  - 模式规则中，至少在规则的目标定义中要包含"%"，否则，就是一般的规则。目标中的"%"定义表示对文件名的匹配，"%"表示长度任意的非空字符串。例如："%.c"表示以".c"结尾的文件名 （文件名的长度至少为 3） ， 而"s.%.c"则表示以"s."开头， ".c"结尾的文件名 （文件名的长度至少为 5）
  - 目标中的模式的"%"决定了依赖目标中"%"的样子
    下面这个例子表示了,把所有的[.c]文件都编译成[.o]文件.  
    %.o : %.c  
    $(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@  
* 自动化变量
  $@  
      表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，"$@"就是匹配于  
  目标中模式定义的集合。
  $<   
      依赖目标中的第一个目标名字。如果依赖目标是以模式（即"%"）定义的，那么"$<"将
  是符合模式的一系列的文件集。注意，其是一个一个取出来的。

  $?
      所有比目标新的依赖目标的集合。以空格分隔。  

  $^  
      所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量
  会去除重复的依赖目标，只保留一份。  

  $+  
      这个变量很像"$^"，也是所有依赖目标的集合。只是它不去除重复的依赖目标。
* 函数调用
  - call函数
    - call 函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用 call 函数来向这个表达式传递参数。其语法是：  

    $(call <expression>,<parm1>,<parm2>,<parm3>...)  

    当 make 执行这个函数时，<expression>参数中的变量，如$(1)，$(2)，$(3)等，会被参数<parm1>，<parm2>，<parm3>依次取代。而<expression>的返回值就是 call 函数的返回值。例如：  
    reverse = $(1) $(2)  
    foo = $(call reverse,a,b)  
    那么，foo 的值就是“a b”。当然，参数的次序是可以自定义的，不一定是顺序的，如：  
    reverse = $(2) $(1)  
    foo = $(call reverse,a,b)  
    此时的 foo的值就是“b a”。  
  - subst函数
    - $(subst <from>,<to>,<text>)  

    名称：字符串替换函数――subst。  
    功能：把字串<text>中的<from>字符串替换成<to>。  
    返回：函数返回被替换过后的字符串。  

    示例： 
    $(subst ee,EE,feet on the street)，  

    把“feet on the street”中的“ee”替换成“EE”，返回结果是“fEEt on the 
    strEEt”。 
  
* 条件判断
  - 语法
    - 条件表达式的语法为：   
    <conditional-directive>  
    <text-if-true>  
    endif  

    以及：   
    <conditional-directive>  
    <text-if-true>  
    else  
    <text-if-false>  
    endif  

    其中<conditional-directive>表示条件关键字，如“ifeq”。这个关键字有四个。
  - 四个条件判断语句ifeq，ifneq，ifdef，ifndef
    第一个是我们前面所见过的“ifeq”  

    ifeq (<arg1>, <arg2>)  
    ifeq '<arg1>' '<arg2>'  
    ifeq "<arg1>" "<arg2>"  
    ifeq "<arg1>" '<arg2>'  
    ifeq '<arg1>' "<arg2>"  

    比较参数“arg1”和“arg2”的值是否相同。当然，参数中我们还可以使用 make 的函数。
    如：  

    ifeq ($(strip $(foo)),)  
    <text-if-empty>  
    endif  

    这个示例中使用了“strip”函数，如果这个函数的返回值是空（Empty） ，那么
    <text-if-empty>就生效。  

    第二个条件关键字是“ifneq”。语法是：  

    ifneq (<arg1>, <arg2>)  
    ifneq '<arg1>' '<arg2>'  
    ifneq "<arg1>" "<arg2>"  
    ifneq "<arg1>" '<arg2>'  
    ifneq '<arg1>' "<arg2>"  

    其比较参数“arg1”和“arg2”的值是否相同，如果不同，则为真。和“ifeq”类似。  

    第三个条件关键字是“ifdef”。语法是：   
    ifdef <variable-name>   
    如果变量<variable-name>的值非空，那到表达式为真。否则，表达式为假。当然，
    <variable-name>同样可以是一个函数的返回值。注意，ifdef 只是测试一个变量是否有值，
    其并不会把变量扩展到当前位置。还是来看两个例子：  

    示例一：  
    bar =  
    foo = $(bar)  
    ifdef foo  
    frobozz = yes  
    else  
    frobozz = no  
    endif  

    示例二：  
    foo =  
    ifdef foo  
    frobozz = yes  
    else  
    frobozz = no  
    endif  

    第一个例子中，“$(frobozz)”值是“yes”，第二个则是“no”。  
    第四个条件关键字是“ifndef”。其语法是：  
    ifndef <variable-name>  
    这个我就不多说了，和“ifdef”是相反的意思。  
    在<conditional-directive>这一行上，多余的空格是被允许的，但是不能以[Tab]键做
    为开始（不然就被认为是命令） 。而注释符“#”同样也是安全的。“else”和“endif”也
    一样，只要不是以[Tab]键开始就行了。  

    特别注意的是，make 是在读取 Makefile 时就计算条件表达式的值，并根据条件表达式
    的值来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为
    自动化变量是在运行时才有的。  

    而且，为了避免混乱，make 不允许把整个条件语句分成两部分放在不同的文件中。  
